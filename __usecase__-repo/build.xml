<!--

                            *************************************************
                                 Share Site Extension - repo build script
                            *************************************************

    Provides a set of targets for building extensions to Alfresco in ZIP, AMP and JAR archive
    formats. Since Alfresco 3.3, JAR is the recommended package structure for all simple extensions.
    For more complex extensions that add additional Java libraries, AMP should be used.

    The following file structure is required in your project directory

        /build.xml - This file
        /config - All web-tier configuration files, e.g. web scripts and Surf configuration

    For building AMP files, the files module.properties and file-mapping.properties are also required
    in the project's root directory.

    During the build process, temporary 'build' and 'dist' directories will be created in the base
    project directory. These may be removed at any time using the 'clean' target.

-->
<project basedir="." default="dist-jar" name="Share Site Extension - repo">

   <!-- Allow override properties -->
    <property file="build.properties" />
    <property file="${user.home}/build.properties" />
   
   <!-- Property default values. May be overridden using above files or via command-line args -->
    <property name="jar.name" value="__company__-__usecase__-repo.jar" />
    <property name="zip.name" value="__company__-__usecase__-repo.zip" />
    <property name="amp.name" value="__company__-__usecase__-repo.amp" />
    <property name="config.includes" value="**/*.*" />
    <property name="config.excludes" value="" />
    <property name="build.res.includes" value="**/*.*" />
    <property name="build.res.excludes" value="" />
    <property name="build.classes.dir" value="shared/classes" />
    <property name="build.lib.dir" value="shared/lib" />
    <!-- Tomcat properties to reload web scripts or the manager webapp -->
    <property name="tomcat.url" value="http://localhost:8080" />
    <property name="tomcat.repo.url" value="${tomcat.url}" />
    <!-- Tomcat properties to reload web scripts -->
    <property name="webapp.alfresco.path" value="/alfresco" />
    <property name="post.verbose" value="false" />
    <property name="repo.admin.username" value="admin" />
    <property name="repo.admin.password" value="admin" />
    <property name="repo.scripts.index" value="${tomcat.repo.url}${webapp.alfresco.path}/service/index" />
    <!-- Properties to access the Tomcat Manager application -->
    <property name="webapp.manager.url" value="${tomcat.url}/manager" />
    <property name="webapp.manager.username" value="admin" />
    <property name="webapp.manager.password" value="" />
    <!-- Paths to local Tomcat instances -->

    <!-- Additional property values. Generally should not be overridden -->
    <property name="config.dir" value="${basedir}/config" />
    <property name="build.dir" value="${basedir}/build" />
    <property name="build.jar.dir" value="${build.dir}/jar" />
    <property name="build.zip.dir" value="${build.dir}/war" />
    <property name="build.amp.dir" value="${build.dir}/amp" />
    <property name="dist.dir" value="${build.dir}/dist" />
    <property name="amp.file.properties" value="module.properties" />
    <property name="amp.file.mappings" value="file-mapping.properties" />
    
    <!-- Define optional tasks -->
    <!--
    <taskdef name="reload"  classname="org.apache.catalina.ant.ReloadTask" />
    <taskdef name="post"    classname="net.sf.antcontrib.net.PostTask" />
    -->
    
    <!-- Alias targets -->
    <target name="build-zip" depends="build-zip-tomcat" />
    <target name="dist-zip" depends="dist-zip-tomcat" />

    <!-- Additional classpath and task definitions -->

    <path id="ml-ant-http.classpath">
        <fileset dir="lib">
            <include name="ml-ant-http-1.1.1.jar" />
        </fileset>
    </path>
   
    <taskdef name="http" classname="org.missinglink.ant.task.http.HttpClientTask">
        <classpath>
            <path refid="ml-ant-http.classpath" />
        </classpath>
    </taskdef>
    
    
    <!-- Main build target definitions -->
    
    
   <!-- Clean out the build and distribution directories -->
   <target name="clean" description="Clean out all build directories">
      <delete dir="${build.dir}" />
      <delete dir="${dist.dir}" />
   </target>
   
   <!-- Create required prerequisite directory structure -->
   <target name="prepare" description="Create initial build structures">
       <mkdir dir="${build.dir}" />
      <mkdir dir="${dist.dir}" />
   </target>
   
    <!--
        Assemble the configuration and resource files in a JAR file structure. This mechanism 
        was introduced in Alfresco 3.3 and allows extensions containing both repository and
        web-tier web scripts, Spring/Surf configuration and static assets to be added to the servlet 
        container as a single library. For more complex extensions, AMP files should be used.
    -->
    <target name="build-jar" description="Assemble configuration and resource files in a JAR file structure">
        <mkdir dir="${build.jar.dir}" />
        <!-- Copy configuration files, web scripts, etc. directly into the JAR so they appear on the 
        classpath. -->
        <copy todir="${build.jar.dir}" includeEmptyDirs="false">
            <fileset dir="${config.dir}" includes="${config.includes}">
            </fileset>
        </copy>
    </target>
   
   <!-- Build the JAR file -->
    <target name="dist-jar" depends="clean, prepare, build-jar" 
      description="Build a JAR file containing configuration and resource files">
      <jar destfile="${dist.dir}/${jar.name}">
         <fileset dir="${build.jar.dir}" />
      </jar>
    </target>
    
    <!--
        Assemble the configuration and resource files in a file structure suitable for deploying
        into an existing Tomcat installation, with the following directories.
        
            /shared/classes/alfresco                          Repository configuration files

        The share-extension directory is not an official location for storing web resources
        required by extensions but worked as an interim measure for versions of Alfresco prior to
        version 3.3, provided that the ROOT webapp is enabled in your Tomcat instance.
        
        By default configuration is placed in directly in Tomcat's shared/classes directory. You 
        can specify a different directory by overriding the build.classes.dir property value. Set 
        this to 'webapps/share/WEB-INF/classes' to place files on the classpath inside the webapp.
    -->
    <target name="build-zip-tomcat" depends="build-zip-prepare,build-zip-config"
      description="Assemble the configuration for a Tomcat deployment structure">
    </target>

    <target name="build-zip-prepare">
        <mkdir dir="${build.zip.dir}/${build.classes.dir}" />
    </target>

    <target name="build-zip-config">
        <copy todir="${build.zip.dir}/${build.classes.dir}">
            <fileset dir="${config.dir}" includes="${config.includes}" excludes="${config.excludes}" />
        </copy>
    </target>
    
    <!-- Build the Tomcat ZIP file -->
    <target name="dist-zip-tomcat" depends="clean, prepare, build-zip-tomcat"
        description="Build a ZIP file containing the customisations that can be deployed in an existing Tomcat installation">
        <zip destfile="${dist.dir}/${zip.name}">
            <fileset dir="${build.zip.dir}" />
        </zip>
    </target>
    
    <!--
        Assemble the configuration and resource files in an AMP file structure. The files
        module.properties and file-mapping.properties must be present in the root of the 
        project.
        
        This creates a structure which can be deployed into an exising alfresco.war file using the
        Alfresco Module Management Tool (MMT). See http://wiki.alfresco.com/wiki/AMP_Files.

        Note that this mechanism will place files directly into the webapp structure when the 
        AMP is deployed, rather than the extension mechanisms used by the JAR and ZIP files that
        ensure files are placed outside the webapp for safety during upgrades, etc.
        
        In this case this should be acceptable since the MMT modifies the WAR file itself 
        rather than just the exploded files, and AMPs can always be re-applied if needed.
        
        In version 3.3 and above the JAR file mechanism is recommended as an alternative for all
        non-complex extensions.
    -->
    <target name="build-amp" description="Assemble the configuration and resource files in an AMP file structure">
      
      <!-- Copy properties files -->
        <copy todir="${build.amp.dir}" file="${amp.file.properties}" failonerror="true" />
        <copy todir="${build.amp.dir}" file="${amp.file.mappings}" failonerror="true" />
      
      <!-- Copy config files -->
        <mkdir dir="${build.amp.dir}/config" />
        <copy todir="${build.amp.dir}/config">
            <fileset dir="${config.dir}" includes="${config.includes}" excludes="${config.excludes}" />
        </copy>

    </target>
    
    <!-- Build the AMP file -->
    <target name="dist-amp" depends="clean, prepare, build-amp" description="Build an AMP file containing all customisations">
        <zip destfile="${dist.dir}/${amp.name}">
            <fileset dir="${build.amp.dir}" />
        </zip>
    </target>
    
    <!-- Shared path definition used to copy files into the local Tomcat instance(s) -->
    <patternset id="hotcopy-tomcat-zip-patternset">
    </patternset>

    <!--
        Hot copy individual files into a local Tomcat instance.
        
        In version 3.3 and above the JAR file mechanism is recommended for distributing your 
        customisations, but this target can still be used during development as it allows you to
        reload changes without restarting Tomcat.
    -->  
    <target name="hotcopy-tomcat-zip" depends="build-zip-tomcat" description="Hot copy individual files into a local Tomcat instance">
        <echo message="Copying repository files" />
        <copy todir="${tomcat.home}" includeEmptyDirs="false">
            <fileset dir="${build.zip.dir}">
                <patternset refid="hotcopy-tomcat-zip-patternset" />
            </fileset>
        </copy>
    </target>

    <!--
        Hot copy JAR file into a local Tomcat instance.
    -->
    <target name="hotcopy-tomcat-jar" depends="dist-jar" description="Hot copy JAR file into a local Tomcat instance">
        <mkdir dir="${tomcat.home}/${build.lib.dir}" />
        <copy todir="${tomcat.home}/${build.lib.dir}">
            <fileset file="${dist.dir}/${jar.name}" />
        </copy>
    </target>
    
    <!--
        Web script reloading from Ant. These tasks use the HTTP task from 
        http://code.google.com/p/missing-link/.
    -->
    <target name="reload-webscripts-repo" depends="" description="Reload repository webscripts">
        <http url="${repo.scripts.index}"
               method="POST"
               printrequest="false"
               printrequestheaders="false"
               printresponse="false"
               printresponseheaders="false"
               expected="200"
               failonunexpected="true">
            <credentials username="${repo.admin.username}" password="${repo.admin.password}" />
            <query>
                <parameter name="reset" value="on" />
            </query>
        </http>
    </target>
    
    <!--
        Uncomment to enable web application reloading from Ant. These tasks use the optional Tomcat
        ant tasks from catalina-ant.jar distributed with Tomcat.
        
        To use these tasks you will need to add catalina-ant.jar to your Ant libs and uncomment the 
        task definitions at the start of this file.
    -->
    <!--
    <target name="reload-webapp-alfresco" description="Reload alfresco web application" depends="">
        <reload 
            url="${webapp.manager.url}" 
            username="${webapp.manager.username}" 
            password="${webapp.manager.password}" 
            path="${webapp.alfresco.path}"/>
    </target>
    -->
   
</project>